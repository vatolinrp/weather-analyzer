http://www.ehcache.org/generated/2.9.0/html/ehc-all/#page/Ehcache_Documentation_Set%2Fco-over_what_is_ehcache.html%23

2 Ehcache

2.1 Введение в Ehcache

Ehcache - основанный на стандартах кеш с открытым исходным кодом. Создан для повышения производительности, разгрузки баз данных и упрощения масштабирования программного продукта. Являясь надежным, проверенным и полнофункциональным решением, он наиболее широко используем на сегодняшний день в приложениях, написанных на Java. Можно использовать Ehcache как кеш общего назначения или как кэш второго уровня для Hibernate. Также можно дополнительно интегрировать его с продуктами сторонних производителей, такими как ColdFusion, Google App Engine и Spring.
Ehcache предоставляет кэш в процессе, который можно реплицировать на нескольких узлах. Он также лежит в основе BigMemory Go и BigMemory Max, коммерческого кэширования Terracotta и хранения данных в памяти. Массив Terracotta Server Array, поставляемый с BigMemory Max, позволяет использовать смешанные конфигурации в процессе или вне процесса с кэшами размером в терабайт.

2.2 Терминология

Cache - Википедия определяет этот термин как “a store of things that will be required in the future, and can be retrieved rapidly.”, что в переводится как хранилище вещей, которые потребуются в будущем, и которые могут быть быстро извлечены. Сам по себе кэш представляет собой набор временных данных, которые либо дублируют данные, расположенные в другом месте, либо являются результатом вычисления. Данные, которые уже находятся в кэше, могут быть повторно доступны с минимальными затратами с точки зрения времени и ресурсов.

Cache hit - когда элемент данных запрашивается из кэша и он существует для данного ключа, то это случай носит название “кэш попадание” ( cache hit ).

Cache miss - когда элемент данных запрашивается из кэша и он не существует для данного ключа, то данный случай носит название “кэш промах“ ( cache miss ).

System of Record ( SOR ) - источник кэшированных данных. Кэш действует как локальное хранилище копий данных, полученных или сохраненных в системе записи (SOR). SOR часто является традиционной базой данных, хотя это может быть специализированная файловая система или какое-либо другое надежное долговременное хранилище. Работая с Ehcache, предполагается, что в качестве SOR используется база данных.

Standalone cache topology - автономная кэш топология, при которой данные хранятся в узле приложения. Любые другие узлы приложения независимы, между ними нет связи. Если используется автономная топология, когда несколько узлов используют одно и то же приложение, то между ними существует слабая согласованность. Они содержат согласованные значения для неизменяемых данных или обновляют элемент данных после того, как время жизни элемента завершилось.

Distributed cache topology - распределенная кэш топология, данные хранятся на удаленном сервере ( или кластере серверов ) с поднабором недавно используемых данных, хранящихся в каждом узле приложения. Эта топология предлагает богатый набор параметров для согласованности. Распределенная топология является рекомендуемым подходом в кластерной или масштабируемой прикладной среде. Она обеспечивает высочайший уровень производительности, доступности и масштабируемости. Распределенная топология доступна только с BigMemory Max.

Replicated cache topology - реплицированная кэш топология, кэшированный набор данных хранится в каждом узле приложения, и данные копируются или недействительны по узлам без блокировки. Репликация может быть асинхронной или синхронной, где поток записи блокируется во время распространения. Единственный режим согласованности, поддерживаемый в этой топологии, - «Слабая согласованность». Многие производственные приложения развертываются в кластерах из нескольких экземпляров для обеспечения доступности и масштабируемости. Однако без распределенного или реплицированного кеша кластеры приложений демонстрируют ряд нежелательных действий, таких как cache drift и database bottlenecks.

Cache Drift - в этом случае, каждый экземпляр приложения хранит свой собственный кеш. Обновления, сделанные в одном кэше, не будут отображаться в других экземплярах. Это происходит с данными веб-сессии. Распределенная или реплицированная топологии кэша обеспечивает синхронизацию всех экземпляров кэша друг с другом.

Database Bottlenecks - узкие места в базе данных. В одиночном экземпляре приложения, кеш эффективно защищает базу данных от избыточных запросов. Однако в распределенной среде приложений каждый экземпляр имеет большую нагрузку и обновляет свой собственный кеш. Издержки при загрузке и обновлении нескольких кэшей приводят к узким местам базы данных по мере добавления большего количества экземпляров приложений. Распределенный или реплицированный кеш устраняет накладные расходы для каждого экземпляра загрузки и обновления нескольких кэшей из базы данных.
