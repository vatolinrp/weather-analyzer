Введение

Java - это независимый от платформы высокоуровневый язык программирования. Он был создан для работы в распределенной среде в Интернете. Java имеет функции GUI, которые лучше
воспринимаются, чем в языке C++, кроме того, он проще в использовании, чем C ++, и работает над концепцией модели объектно-ориентированного программирования. Также широко используется в онлайн играх,
помогает передовать видео, аудио, общаться с людьми по всему миру, существует масса банковских приложений, помогает просматривать 3D-изображения и корзины покупок. Java находит широкое применение 
в приложениях интранет и других решениях для электронного бизнеса, в которых присутствуют массовые корпоративные вычисления. Рассматривается как наиболее хорошо описанный и планируемый язык 
для разработки приложений для Интернета.

Java - это хорошо известная технология, которая позволяет вам иметь программное обеспечение, предназначенное и написанное только один раз для «виртуальной машины» для работы на разных компьютерах, 
поддерживает различные операционные системы, такие как компьютеры под управлением Windows, Macintosh и Linux. В веб-аспекте Java популярна на веб-серверах, используемых многими крупнейшими 
интерактивными веб-сайтами. Она используется для создания автономных приложений, которые могут выполняться на одном компьютере или в распределенной сети. Java также может быть использована для 
создания небольшой прикладной программы на основе апплета, которая далее используется для веб-страницы. Аплеты упрощают взаимодействие с веб-страницей.

Java впереди

Являясь языком высокого уровня, он обладает такими качествами, как:
1. объектно-ориентированность
2. простота
3. архитектурная нейтральность
4. портативность
5. распределенность
6. высокопроизводителен
7. обеспечивает многопоточность
8. надежность
9. динамичность
10. безопасность

Java имеет преимущество перед другими языками и средами, которые делают его пригодным для любой задачи программирования. Выделяют следующие преимущества:
1. Java сам по себе прост, прост в дизайне, удобен в написании и поэтому легко компилируется, отлаживается и учится, чем любые другие языки программирования.
2. Java объектно-ориентированна, используется для построения модульных программ и кода многократного использования.
3. Java является платформо-независимым и гибким по своей природе. Самой важной особенностью Java является возможность легко запускать программу как в одной компьютерной системе, так и в другой.
4. Java работает в распределенной среде. Он предназначен для работы в распределенных вычислениях. Любые сетевые программы на Java аналогичны программам на отправку и прием данных в и из файла.
5. Java является безопасным. Язык Java, компилятор, интерпретатор и среда выполнения являются защищаемыми.
6. Java является надежной. В Java есть способна проверять код на наличие возможных ошибок на этапе компиляции.
7. Java поддерживает многопоточность. Многопоточность - это путь выполнения программы, в которой выполняются нескольких задач одновременно. В Java реализована концепция многопоточной программы. На других языках для работы в многопоточном режиме необходимо вызвать специальные для операционной системы процедуры.

Java - это язык программирования высокого уровня и одновременно мощная программная платформа. При полном использовании платформы Java вы получаете следующие возможности:
1. Средства JDK. Инструменты JDK обеспечивают компиляцию, интерпретацию, запуск, мониторинг, отладку и документирование ваших приложений. Основными используемыми инструментами являются компилятор Javac, java launcher и инструмент документации javadoc.
2. Интерфейс прикладного программирования (API): API обеспечивает основные функциональные возможности языка программирования Java. Он предоставляет широкий набор полезных классов, которые далее используются в ваших собственных приложениях. Он предоставляет базовые объекты и интерфейс для сетей и безопасности, для генерации XML и доступа к базе данных и многое другое.
3. Технологии развертывания. Программное обеспечение JDK предоставляет два типа технологий развертывания, такие как программное обеспечение Java Web Start и программное обеспечение Java Plug-In для развертывания ваших приложений для конечных пользователей.
4. Инструментарий графического пользовательского интерфейса: набор инструментов Swing и Java 2D предоставляет нам функцию графических пользовательских интерфейсов (GUI).
5. Интегрированные библиотеки: реализована интегриация с различными библиотеками, такими как Java IDL API, API JDBC, API для Java Naming и Directory Interface TM («JNDI»), Java RMI и Java Remote Method Invocation по технологии Inter-ORB протокола Интернета (Java RMI-IIOP технология) позволяют базе данных получать доступ и изменять удаленные объекты.

Java платформа меняет нашу жизнь. Легко начать пользоваться. Поскольку язык программирования Java полностью основан на объектно-ориентированном языке, его очень легко и просто освоить, особенно для программистов, уже знакомых с C или C ++. Легко начать писать код: по сравнению с метриками программы (подсчет классов, количество методов и т. д.) программа, написанная на языке программирования Java, может быть в четыре раза меньше по сравнению с той же программой, написанной на C ++. Язык программирования Java поощряет хорошие методы кодирования и управляет автоматическим сбором мусора, который помогает избежать утечек памяти. Основанная на концепции ориентации объектов, ее компонентная архитектура Java Beans и широкая область применения, легко расширяема, гибкая и API могут повторно использовать существующий, протестированный код и создавать меньше ошибок. Java проще, чем C ++, как таковой, управляет вашим временем разработки в два раза быстрее, когда пишете на нем. Для программ также потребуется меньшее количество строк кода. Независима от платформы: программа сохраняет портативность и независимость от платформы, избегая использования библиотек, написанных на других языках. Любой исходный код программы написанный на языке программирования Java, который компилируется в машинно-независимые байтовые коды и выполняется последовательно на любой платформе Java. Распространение программного обеспечения упрощает работу: используя программное обеспечение Java Web Start, пользователи смогут запускать собственные приложения одним щелчком мыши.

Java платформа

Платформа представляет собой кросс-сочетание аппаратного и программного окружения, в котором выполняется программа. Мы уже знакомы с самой популярными платформами, такими как Microsoft Windows, Linux, Solaris OS и Macintosh OS. Платформа Java отличается от других платформ, которая является единственной программной платформой, которая работает на других аппаратных платформах.

Платформа Java состоит из двух компонент: виртуальная машина (JVM) и интерфейс прикладного программирования (API). Виртуальная машина Java является корнем платформы Java и интегрирована в различные аппаратные платформы.
API представляет собой обширную коллекцию различных программных компонент, которые предоставляют множество полезных функций для приложения. Он сгруппирован в логическую коллекцию связанных классов и интерфейсов. Эти логические коллекции называются пакетами.

[javaus1.gif]

API и виртуальная машина Java изолируют программу от аппаратного обеспечения. Java работает на платформо-независимой среде, сама платформа немного медленнее, чем собственный код. Однако новые изменения в компиляторах и виртуальных машинах приближают производительность к естественному коду, не представляя угрозы безопасности для переносимости. Весь исходный код на Java находится в текстовых файлах с расширением .java. Исходные файлы компилируются в файлы .class компилятором. Файл .class содержит байт-код, который в дальнейшем будет выполнен с помощью виртуальной машины Java (JVM). Инструмент запуска Java запускает приложение с экземпляром виртуальной машины Java.

[g1.gif]

JVM запускает байт код в любой системе, то соответственно она и работает в любой операционной системе одинаково. Для этого создаются определенные версии JVM, рассчитанные для работы в необходимой среде. К примеру, виртуальная машина Java Hotspot, рассчитанная для систем Microsoft Windows, Linux, Solaris, повышает производительность приложения во время выполнения, благодаря поиску “горячих мест”, которые очень часто выполняются. В ее обязанности входят различные задачи, такие как повышение эффективности программы и перекомпиляция (в машинный код) исходного кода, который часто используюется при выполнении программы.

[helloWorld.gif]
